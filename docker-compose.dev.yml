version: "3.9"

services:
  # Frontend development service
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: builder
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
      - butagira-dev-network
    command: npm run dev
    stdin_open: true
    tty: true

  # Backend development service
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: builder
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/butagira
      - REDIS_URL=redis://redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
      - butagira-dev-network
    depends_on:
      - db
      - redis
    command: npm run start:dev

  # Database service
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=butagira
    ports:
      - "5432:5432"
    volumes:
      - pgdata_dev:/var/lib/postgresql/data
    networks:
      - butagira-dev-network

  # Redis service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - butagira-dev-network

  # MinIO service
  minio:
    image: minio/minio:RELEASE.2024-08-17T01-24-54Z
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata_dev:/data
    networks:
      - butagira-dev-network

networks:
  butagira-dev-network:
    driver: bridge

volumes:
  pgdata_dev:
  miniodata_dev:
